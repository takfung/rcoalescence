#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
# loadModule(SpatialTree)
require( Rcpp )
dyn.load( "rcoalescence.so" )
coalescenceModule
library(Rcpp)
loadModule("coalescenceModule")
coalescenceModule
Module(coalescenceModule)
Module("coalescenceModule")
mod <- Module("coalescenceModule")
library(rcoalescence)
rcoalescence::.__C__Rcpp_RSpatialTree
st <- rcoalescence::.__C__Rcpp_RSpatialTree
library(rcoalescence)
library(rcoalescence)
devtools::load_all(".")
library(rcoalescence)
st <- rcoalescence::.__C__Rcpp_RSpatialTree
s <- new(st)
s
s.setSimulationParameters()
rcoalescence:::RSpatialTree
rcoalescence:::.__NAMESPACE__.
rcoalescence:::.__Mod__coalescenceModule
rcoalescence:::.__Mod__coalescenceModule$RSpatialTree
s <- rcoalescence:::.__Mod__coalescenceModule$RSpatialTree
st <- new(s)
st.setup()
st$setup()
install.packages(c("callr", "dbplyr", "digest", "haven", "hms", "knitr", "mgcv", "mvtnorm", "openssl", "pillar", "Rcpp", "reprex", "rpart", "rprojroot", "sp", "survminer", "tibble", "tidyr", "utf8", "viridisLite", "xml2", "zoo"))
install.packages(c("callr", "dbplyr", "digest", "haven", "hms", "knitr", "mgcv", "mvtnorm", "openssl", "pillar", "Rcpp", "reprex", "rpart", "rprojroot", "sp", "survminer", "tibble", "tidyr", "utf8", "viridisLite", "xml2", "zoo"))
install.packages(c("callr", "dbplyr", "digest", "haven", "hms", "knitr", "mgcv", "mvtnorm", "openssl", "pillar", "Rcpp", "reprex", "rpart", "rprojroot", "sp", "survminer", "tibble", "tidyr", "utf8", "viridisLite", "xml2", "zoo"))
install.packages(c("callr", "dbplyr", "digest", "haven", "hms", "knitr", "mgcv", "mvtnorm", "openssl", "pillar", "Rcpp", "reprex", "rpart", "rprojroot", "sp", "survminer", "tibble", "tidyr", "utf8", "viridisLite", "xml2", "zoo"))
install.packages(c("callr", "dbplyr", "digest", "haven", "hms", "knitr", "mgcv", "mvtnorm", "openssl", "pillar", "Rcpp", "reprex", "rpart", "rprojroot", "sp", "survminer", "tibble", "tidyr", "utf8", "viridisLite", "xml2", "zoo"))
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
RSpatialTree
RSpatialTree@generator
RSpatialTree$methods(add = function(){print("ok")})
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
setRefClass("RSpatialTree")
RSpatialTree
library(rcoalescence)
rst <- new("RSpatialTree")
rst$setSimulationParameters
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
RSpatialTree
library(rcoalescence)
rcoalescence::.__C__RSpatialTree
library(rcoalescence)
RSpatialTree
RSpatialTree$methods
RSpatialTree$methods()
?RSpatialTree@setSpeciationParameters
?setSpeciationParameters
?RSpatialTree
tmp <- RSpatialTree$new()
tmp
tmp$applySpeciationRates
tmp$applySpeciationRates()
?tmp
?RSpatialTree$applySpeciationRates
?RSpatialTree@applySpeciationRates
?RSpatialTree@
s
?RSpatialTree@
?RSpatialTree@
?RSpatialTree
type(RSpatialTree)
str(tmp)
library(rcoalescence)
?RSpatialTree
?RSpatialTree
?RSpatialTree
?RSpatialTree
library(rcoalescence)
library(rcoalescence)
?RSpatialTree
library(rcoalescence)
?RSpatialTree
library(rcoalescence)
SpatialTree
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
?obj$help
?obj$help()
obj$help()
?ReferenceClass
?ReferenceClasses
SpatialTree$help()
SpatialTree$methods(add=function(x){return(x+1)})
library(rcoalescence)
SpatialTree$methods(add=function(x){return(x+1)})
SpatialTree$methods(add=function(x){return(x+1)})
library(rcoalescence)
library(rcoalescence)
SpatialTree
SpatialTree
library(rcoalescence)
library(rcoalescence)
SpatialTree
SpatialTree$methods()
SpatialTree$methods(add=function(x){return(1)})
library(rcoalescence)
test
test
library(rcoalescence)
test$setup()
library(rcoalescence)
test
test$methods()
test$.objectParent
test$.objectParent()
test$.objectParent
test$setup()
test$setMapParameters()
?loadModule
library(rcoalescence)
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=1)
simulation$setSimulationParameters(seed=1, task=1, speciation_rate=0.01, sigma = 2,max_time =2)
library(rcoalescence)
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=1, task=1, speciation_rate=0.01, sigma = 2,max_time =2)
simulation$runSimulation()
simulation$runSimulation()
simulation$runSimulation()
simulation$setSimulationParameters(seed=1, task=1, speciation_rate=0.01, sigma = 2,max_time =10)
simulation$runSimulation()
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=1, task=1, speciation_rate=0.01, sigma = 2, max_time =10)
simulation$runSimulation()
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(task=1, seed=1, speciation_rate = 0.01, sigma = 2)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(task=12, seed=1, speciation_rate=0.01, deme=1, sigma=2,
fine_map_x_size=10, fine_map_y_size=10, uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(task=12, seed=1, speciation_rate=0.01, deme=1, sigma=2,
fine_map_x_size=10, fine_map_y_size=10, uses_logging = FALSE)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(task=12, seed=1, speciation_rate=0.01, deme=1, sigma=2,
fine_map_x_size=10, fine_map_y_size=10, uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(task=12, seed=1, speciation_rate=0.01, deme=1, sigma=2,
fine_map_x_size=10, fine_map_y_size=10, uses_logging = FALSE)
tmo
tmp
tmp$setup()
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(task=12, seed=1, speciation_rate=0.01, deme=1, sigma=2,
fine_map_x_size=10, fine_map_y_size=10, uses_logging = FALSE)
tmp$runSimulation()
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
tmp <- new("SpatialTree")
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
?SpatialTree
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
?RSQlite
library(RSQLite)
?RSQLite
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
setwd("~/Documents/PhD/Code/rcoalescence/tests/testthat")
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp <- SpatialTree$new
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE))
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../dasta/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../dasta/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
getwd()
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 1.0,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
community_references <- data.frame(matrix(NA, nrow = 2, ncol=2))
community_references$reference <- c(1, 2)
community_references$speciation_rate <- c(0.5, 0.7)
community_references$time <- c(0.0, 0.0)
community_references$fragments <- c(0, 0)
community_references$metacommunity_reference <- c(0, 0)
community_references
community_references <- data.frame(matrix(nrow = 2, ncol=2))
community_references$reference <- c(1, 2)
community_references$speciation_rate <- c(0.5, 0.7)
community_references$time <- c(0.0, 0.0)
community_references$fragments <- c(0, 0)
community_references$metacommunity_reference <- c(0, 0)
community_references
community_references <- data.frame(reference=NA, speciation_rate=NA,
time=NA, fragments=NA, metacommunity_reference=NA)
community_references
community_references$reference <- c(1, 2)
community_references <- data.frame(reference=NA, speciation_rate=NA,
time=NA, fragments=NA, metacommunity_reference=NA, nrow = 2)
community_references$reference <- c(1, 2)
community_references
community_references <- data.frame(matrix(NA, nrow = 2, ncol=2))
names(community_references) <- c("reference", "speciation_rate")
community_references$reference <- c(1, 2)
community_references$speciation_rate <- c(0.5, 0.7)
community_references$time <- c(0.0, 0.0)
community_references$fragments <- c(0, 0)
community_references$metacommunity_reference <- c(0, 0)
community_references
tmp$getSpeciesAbundances()
tmp$runSimulation()
tmp$output()
library(rcoalescence)
tmp <- SpatialTree$new()
tmp$setSimulationParameters(seed=10, task =1, output_directory = "output", speciation_rate = 0.5,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1,
fine_map_file = "../../data/sample/SA_sample_fine.tif",
coarse_map_file="../../data/sample/SA_sample_coarse.tif",
sample_mask_file = "../../data/sample/SA_samplemaskINT.tif",
uses_logging = TRUE)
tmp$runSimulation()
tmp$applySpeciationRates(speciation_rates = c(0.5, 0.7))
tmp$output()
community_references <- data.frame(matrix(NA, nrow = 2, ncol=2))
names(community_references) <- c("reference", "speciation_rate")
community_references$reference <- c(1, 2)
community_references$speciation_rate <- c(0.5, 0.7)
community_references$time <- c(0.0, 0.0)
community_references$fragments <- c(0, 0)
community_references$metacommunity_reference <- c(0, 0)
tmp$getCommunityReferences()
community_references
identical(community_references, tmp$getCommunityReferences(
))
community_references
tmp$getCommunityReferences()
tmp$getCommunityReferences() == community_references
?identical
all.equal(tmp$getCommunityReferences(), community_references)
expected_abudances <- matrix(c(0, 0, 1, 1, 2, 1, 3, 1, 4, 1), ncol=2)
expected_abudances
names(expected_abudances) <- c("species_id", "abundance")
expected_abudances
expected_abudances
expected_abudances <- data.frame(matrix(c(0, 0, 1, 1, 2, 1, 3, 1, 4, 1), ncol=2))
names(expected_abudances) <- c("species_id", "abundance")
expected_abudances
actual_abundances <- tmp$getSpeciesAbundances(1)
actual_abundances
actual_abundances <- tmp$getSpeciesAbundances(1)[1:5]
actual_abundances <- tmp$getSpeciesAbundances(1)[1:5,]
actual_abundances
actual_abundances <- tail(tmp$getSpeciesAbundances(2), 5)
actual_abundances
# Check community references
community_references <- data.frame(matrix(c(1, 0.5, 0.0, 0, 0, 2, 0.7, 0.0, 0, 0), nrow = 2, ncol=5))
names(community_references) <- c("reference", "speciation_rate", "time", "fragments", "metacommunity_reference")
community_references
# Check community references
community_references <- data.frame(matrix(c(0.5, 0.0, 0, 0, 2, 0.7, 0.0, 0, 0), nrow = 2, ncol=5))
# Check community references
community_references <- data.frame(matrix(c(1, 0.5, 0.0, 0, 0, 2, 0.7, 0.0, 0, 0), nrow = 2, ncol=5))
# Check community references
community_references <- data.frame(t(matrix(c(1, 0.5, 0.0, 0, 0, 2, 0.7, 0.0, 0, 0), nrow = 5, ncol=2)))
community_references
# Check species abundances
expected_abundances <- data.frame(matrix(c(0, 0, 1, 1, 2, 1, 3, 1, 4, 1), ncol=2))
names(expected_abundances) <- c("species_id", "abundance")
expected_abudances
actual_abundances <- head(tmp$getSpeciesAbundances(1), 5)
actual_abundances
# Check species abundances
expected_abundances <- data.frame(matrix(c(0, 0, 1, 1, 2, 1, 3, 1, 4, 1), ncol=2))
names(expected_abundances) <- c("species_id", "no_individuals")
actual_abundances <- head(tmp$getSpeciesAbundances(1), 5)
expected_abundances
actual_abundances
?matrix
# Check species abundances
expected_abundances <- data.frame(matrix(c(0, 0, 1, 1, 2, 1, 3, 1, 4, 1), ncol=2, byrow=TRUE))
names(expected_abundances) <- c("species_id", "no_individuals")
actual_abundances <- head(tmp$getSpeciesAbundances(1), 5)
expected_abundances <- data.frame(matrix(c(1165, 2, 1166, 1, 1167, 1, 1168, 1, 1169, 1), ncol=2, byrow=TRUE))
names(expected_abundances) <- c("species_id", "no_individuals")
actual_abundances <- tail(tmp$getSpeciesAbundances(2), 5)
expected_abudances
actual_abundances
expected_abundances
actual_abundances
actual_abundances <- tail(tmp$getSpeciesAbundances(2), 5)[,]
actual_abundances
all.equal(expected_abundances, actual_abundances)
expected_abundances
actual_abundances
actual_abundances <- tmp$getSpeciesAbundances(2)[-5,]
actual_abundances
actual_abundances <- data.frame(tail(tmp$getSpeciesAbundances(2), 5))
actual_abundances
actual_abundances <- data.frame(tail(tmp$getSpeciesAbundances(2), 5), row.names = FALSE)
?data.frame
actual_abundances <- data.frame(tail(tmp$getSpeciesAbundances(2), 5), row.names = NULL)
actual_abundances
all.equal(expected_abundances, actual_abundances)
tmp$getSpeciesRichness(2)
tmp$getSpeciesRichness(2)[1]
tmp$getSpeciesRichness(2)[[1]]
# Check species locations
expected_locations <- data.frame(matrix(c(1, 0, 10, 2, 0, 10, 3, 0, 10, 4, 0, 10, 5, 0, 10), ncol=3, byrow=TRUE))
names(expected_locations) <- c("species_id", "x", "y")
actual_locations <- head(tmp$getSpeciesAbundances(1), 5)
expected_locations
actual_locations
actual_locations <- head(tmp$getSpeciesLocations(1), 5)
actual_locations
expected_locations
library(devtools)
use_mit_licence()
devtools
devtools::use_mit_license()
# Example simulation using the supplied dimensions and offsets, with logging
library(rcoalescence)
# Or rely on automatic detection of map dimensions and offsets, without logging
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output", speciation_rate = 0.001,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1,
fine_map_file = "../../inst/extdata/sample/example_fine.tif",
coarse_map_file="../../inst/extdata/sample/example_coarse.tif",
sample_mask_file = "../../inst/extdata/sample/example_mask.tif", uses_logging = FALSE)
# Or rely on automatic detection of map dimensions and offsets, without logging
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output", speciation_rate = 0.001,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1,
fine_map_file = "../../inst/extdata/sample/example_fine.tif",
coarse_map_file="../../inst/extdata/sample/example_coarse.tif",
sample_mask_file = "../../inst/extdata/sample/example_mask.tif", uses_logging = FALSE)
simulation$runSimulation()
# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.01, 0.7, 0.8))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances
simulation$getSpeciesAbundances(1)
# Or rely on automatic detection of map dimensions and offsets, without logging
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output", speciation_rate = 0.001,
sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1,
fine_map_file = "../../inst/extdata/sample/example_fine.tif",
coarse_map_file="../../inst/extdata/sample/example_coarse.tif",
sample_mask_file = "../../inst/extdata/sample/example_mask.tif",
uses_logging = FALSE)
simulation$runSimulation()
# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.001, 0.7, 0.8))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances
simulation$getSpeciesAbundances(1)
# Get the species abundances
tail(simulation$getSpeciesAbundances(1), 5)
library(rcoalescence)
library(rcoalescence)
library(rcoalescence)
?rcoalescence
library(rcoalescence)
?rcoalescence
library(rcoalescence)
?rcoalescence
library(rcoalescence)
?rcoalescence
source('~/Documents/PhD/Code/rcoalescence/tests/testthat/test_basic.R')
library(rcoalescence)
community_references <- data.frame(matrix(c(1, 0.5, 0.0, 0, 0, 2, 0.5, 1.0, 0, 0,
3, 0.5, 10.0, 0, 0, 4, 0.5, 20.0, 0, 0), nrow = 2,
ncol=5, byrow=TRUE))
names(community_references) <- c("reference", "speciation_rate", "time", "fragments",
"metacommunity_reference")
community_references
community_references <- data.frame(matrix(c(1, 0.5, 0.0, 0, 0, 2, 0.5, 1.0, 0, 0,
3, 0.5, 10.0, 0, 0, 4, 0.5, 20.0, 0, 0),
ncol=5, byrow=TRUE))
names(community_references) <- c("reference", "speciation_rate", "time", "fragments",
"metacommunity_reference")
community_references
unlink("output", recursive=TRUE)
