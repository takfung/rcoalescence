% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppCoalescenceModule.R
\docType{class}
\name{SpatialTree}
\alias{SpatialTree}
\title{Simulate and analyse spatially-explicit neutral models.}
\description{
Main class for setting up, running and analysing simulations.
These parameters are required at simulation time. The vast majority have defaults,
which are defined in setSimulationParameters()
\itemize{
\item \emph{task}: the task reference number
\item \emph{seed}: the seed for setting random number generation
\item \emph{output_directory}: the path to the folder for storing simulation files
\item \emph{max_time}: the maximum number of seconds to simulate for before pausing
\item \emph{desired_specnum}: the desired number of species to aim for
\item \emph{times_list}: list of temporal sampling points
\item \emph{uses_logging}: if true, all outputs are written to console
\item \emph{sigma}: mean dispersal: distance for a normally-distributed dispersal kernel
\item \emph{dispersal_method}: the method of dispersal from "normal", "fat-tailed", "uniform" and "norm-uniform"
\item \emph{tau}: the tau parameter for a fat-tailed dispersal kernel
\item \emph{m_prob}: the probability of dispersing uniformly for the norm-uniform dispersal kernel
\item \emph{cutoff}: the maximum distance dispersal occurs for in a uniform dispersal kernel
\item \emph{dispersal_relative_cost}: the relative cost of moving through non-forest
\item \emph{restrict_self}: if true, prevents individuals from dispersing from their own cell
\item \emph{landscape_type}: type of landscape from "closed", "infinite" and "tiled"
\item \emph{dispersal_file}: a map of dispersal probabilities
\item \emph{reproduction_file}: a map of reproduction probabilies
\item \emph{fine_map_file}: fine resolution density map
\item \emph{coarse_map_file}: coarse resolution density map
\item \emph{sample_mask_file}: spatial sampling mask
\item \emph{grid_x_size}: x dimension of the grid
\item \emph{grid_y_size}: y dimension of the grid
\item \emph{sample_x_size}: x dimension of the sample mask
\item \emph{sample_y_size}: y dimension of the sample mask
\item \emph{sample_x_offset}: the x offset of the sample mask from the grid
\item \emph{sample_y_offset}: the y offset of the sample mask from the grid
\item \emph{fine_map_x_size}: the x dimension of the fine map
\item \emph{fine_map_y_size}: the y dimension of the fine map
\item \emph{fine_map_x_offset}: the x offset of the fine map from the sample mask
\item \emph{fine_map_y_offset}: the y offset of the fine map from the sample mask
\item \emph{coarse_map_x_size}: the x dimension of the coarse map
\item \emph{coarse_map_y_size}: the y dimension of the coarse map
\item \emph{coarse_map_x_offset}: the x offset of the coarse map from the fine map
\item \emph{coarse_map_y_offset}: the y offset of the coarse map from the fine map
\item \emph{coarse_map_scale}: the relative scale of the coarse map
\item \emph{deme}: the number of individuals per cell
\item \emph{deme_sample}: the global sampling proportion
\item \emph{uses_spatial_sampling}: if true, the sample mask defines relative sampling proportions across the map
\item \emph{pristine_fine_map}: the pristine fine map file
\item \emph{pristine_coarse_map}: the pristine coarse map file
\item \emph{gen_since_pristine}: the number of generations since the pristine state
\item \emph{habitat_change_rate}: the rate of change to the pristine map
\item \emph{speciation_rate}: the minimum speciation rate for the simulation
\item \emph{is_protracted}: if true, simulation will be simulated with protracted speciation
\item \emph{min_speciation_gen}: minimum number of generations required before speciation
\item \emph{max_speciation_gen}: maximum number of generations required before speciation
}
}
\details{
Simulation parameters

Post-simulation parameter details
These are for rebuilding the coalescence tree under different conditions.
\itemize{
\item \emph{output_file}: the directory to output to, defaults to "none"
\item \emph{use_spatial}: if true, records full spatial locations of all individuals. Default=FALSE
\item \emph{sample_file}: supply a mask for defining spatial sampling. Default="null"
\item \emph{use_fragments}: supply a file containing fragment coordinates, or TRUE to let program calculate fragments
\item \emph{speciation_rates}: list of speciation rates to apply
\item \emph{times_list}: list of times to calculate coalescence tree for
\item \emph{min_speciation_gen}: the minimum number of generations required before speciation
\item \emph{max_speciation_gen}: the maximum number of generations required before speciation
\item \emph{metacommunity_size}: the number of individuals in the metacommunity
\item \emph{metacommunity_speciation_rate}: the effective speciation rate of the metacommunity
}
}
\section{Methods}{

\describe{
\item{\code{addPristineMap(pristine_fine_map, pristine_coarse_map = "none",
  gen_since_pristine = 1, habitat_change_rate = 0)}}{Adds a pristine map to the list of pristine maps to use.}

\item{\code{applySpeciationRates(speciation_rates, output_file = "none",
  use_spatial = FALSE, sample_file = "null", use_fragments = FALSE,
  times_list = c(0), min_speciation_gen = 0, max_speciation_gen = 0,
  metacommunity_size = 0, metacommunity_speciation_rate = 0)}}{Applies the provided speciation parameters to the simulation}

\item{\code{checkOutputDatabase()}}{Checks that the output database exists}

\item{\code{getCommunityReferences()}}{Returns a data frame containing all the community references and their parameter sets.}

\item{\code{getMetacommunityReferences()}}{Returns a data frame containing all the metacommunity references and their parameter sets.}

\item{\code{getSpeciesAbundances(community_reference = 1)}}{Gets a data frame of species abundances where the community reference matches the input}

\item{\code{getSpeciesLocations(community_reference = 1)}}{Gets a data frame of species locations where the community reference matches the input.}

\item{\code{getSpeciesRichness(community_reference = NA)}}{Gets the community reference from the output database, or from the internal object if no 
community reference is supplied (this will return the last calculated species richness).}

\item{\code{output()}}{Outputs the biodiversity data to an sql database.}

\item{\code{setDispersalParameters(sigma, dispersal_method = "normal", tau = 1,
  m_prob = 0, cutoff = 0, dispersal_relative_cost = 1,
  restrict_self = FALSE, landscape_type = "closed",
  dispersal_file = "null", reproduction_file = "null")}}{Sets the dispersal parameters for the simulation}

\item{\code{setKeyParameters(task, seed, output_directory = "output", max_time = 3600,
  desired_specnum = 1, times_list = c(0), uses_logging = NA)}}{Sets the key parameters for the simulation}

\item{\code{setMapParameters(fine_map_file = "null", coarse_map_file = "none",
  sample_mask_file = "null", grid_x_size = NA, grid_y_size = NA,
  sample_x_size = 0, sample_y_size = 0, sample_x_offset = 0,
  sample_y_offset = 0, fine_map_x_size = 0, fine_map_y_size = 0,
  fine_map_x_offset = 0, fine_map_y_offset = 0, coarse_map_x_size = 0,
  coarse_map_y_size = 0, coarse_map_x_offset = 0, coarse_map_y_offset = 0,
  coarse_map_scale = 1, deme = 1, deme_sample = 1,
  uses_spatial_sampling = FALSE)}}{Sets the map parameters for the simulation}

\item{\code{setOutputDatabase(output_db)}}{Checks the output database exists and has been created properly, if it has been set.}

\item{\code{setPristineMapParameters(pristine_fine_map = "none",
  pristine_coarse_map = "none", gen_since_pristine = 1e+08,
  habitat_change_rate = 0)}}{Sets the pristine map parameters for the simulation testing}

\item{\code{setSimulationParameters(task, seed, speciation_rate, sigma,
  output_directory = "output", max_time = 3600, desired_specnum = 1,
  times_list = c(0), uses_logging = NA, is_protracted = FALSE,
  min_speciation_gen = 0, max_speciation_gen = 0,
  dispersal_method = "normal", tau = 1, m_prob = 0, cutoff = 0,
  dispersal_relative_cost = 1, restrict_self = FALSE,
  landscape_type = "closed", dispersal_file = "none",
  reproduction_file = "none", fine_map_file = "null",
  coarse_map_file = "none", sample_mask_file = "null", grid_x_size = NA,
  grid_y_size = NA, sample_x_size = 0, sample_y_size = 0,
  sample_x_offset = 0, sample_y_offset = 0, fine_map_x_size = 0,
  fine_map_y_size = 0, fine_map_x_offset = 0, fine_map_y_offset = 0,
  coarse_map_x_size = 0, coarse_map_y_size = 0, coarse_map_x_offset = 0,
  coarse_map_y_offset = 0, coarse_map_scale = 1, deme = 1,
  deme_sample = 1, uses_spatial_sampling = FALSE,
  pristine_fine_map = "none", pristine_coarse_map = "none",
  gen_since_pristine = 1e+08, habitat_change_rate = 0)}}{Sets all simulation parameters}

\item{\code{setSpeciationParameters(speciation_rate, is_protracted = FALSE,
  min_speciation_gen = 0, max_speciation_gen = 0)}}{Sets the speciation parameters for the simulation}
}}

\examples{
# Example simulation using the supplied dimensions and offsets, with logging
library(rcoalescence)
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output", 
                                   speciation_rate = 0.5, sigma=2 * (2 ** 0.5), deme=1, 
                                   deme_sample = 0.1, 
                                   fine_map_file = "../../inst/extdata/sample/example_fine.tif",
                                   fine_map_x_size = 13, fine_map_y_size = 13, 
                                   coarse_map_file="../../inst/extdata/sample/example_coarse.tif",
                                   coarse_map_x_size = 35, coarse_map_y_size = 41, 
                                   coarse_map_x_offset = 11, coarse_map_y_offset = 14,
                                   sample_mask_file = "../../inst/extdata/sample/example_mask.tif", 
                                   sample_x_size = 13, sample_y_size = 13, uses_logging = TRUE)
simulation$runSimulation()

# Or rely on automatic detection of map dimensions and offsets, without logging
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output",
                                   speciation_rate = 0.001, 
                                   sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1, 
                                   fine_map_file = "../../inst/extdata/sample/example_fine.tif", 
                                   coarse_map_file="../../inst/extdata/sample/example_coarse.tif",
                                   sample_mask_file = "../../inst/extdata/sample/example_mask.tif",
                                   uses_logging = FALSE)
simulation$runSimulation()

# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.001, 0.7, 0.8))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances (last 5)
tail(simulation$getSpeciesAbundances(1), 5)
}
