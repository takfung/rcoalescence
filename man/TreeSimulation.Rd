% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppCoalescenceModule.R
\name{TreeSimulation}
\alias{TreeSimulation}
\title{Non-spatial neutral simulations}
\description{
Run non-spatial neutral models. Here no map files are required, simply set up the
simulation and run. Dispersal parameters (sigma, tau, etc) are not relevant for this class.
}
\section{Alternative classes}{

For alternative classes providing similar functionality, see \link[=NeutralTreeSimulation]{here}.
}

\section{Simulation parameters}{

These parameters are required at simulation time. The vast majority have defaults,
which are defined in setSimulationParameters()
\itemize{
\item \emph{task}: the task reference number
\item \emph{seed}: the seed for setting random number generation
\item \emph{output_directory}: the path to the folder for storing simulation files
\item \emph{max_time}: the maximum number of seconds to simulate for before pausing
\item \emph{desired_specnum}: the desired number of species to aim for
\item \emph{times_list}: list of temporal sampling points
\item \emph{uses_logging}: if true, all outputs are written to console
\item \emph{deme}: the number of individuals per cell
\item \emph{deme_sample}: the global sampling proportion
\item \emph{min_speciation_rate}: the minimum speciation rate for the simulation
}
}

\section{Post-simulation parameters}{

These are for rebuilding the coalescence tree under different conditions.
\itemize{
\item \emph{output_file}: the directory to output to, defaults to "none"
\item \emph{use_spatial}: if true, records full spatial locations of all individuals. Default=FALSE
\item \emph{sample_file}: supply a mask for defining spatial sampling. Default="null"
\item \emph{use_fragments}: supply a file containing fragment coordinates, or TRUE to let program calculate fragments
\item \emph{speciation_rates}: list of speciation rates to apply
\item \emph{times_list}: list of times to calculate coalescence tree at
\item \emph{min_speciation_gens}: list of the minimum number of generations required before speciation
\item \emph{max_speciation_gens}: list of the maximum number of generations required before speciation
}
}

\examples{
# Example simulation for non-spatial models
library(rcoalescence)
# Create a new simulation object
simulation <- TreeSimulation$new()
# Simulate 100 individuals
simulation$setSimulationParameters(seed=10, task =1, output_directory = "output", 
                                   min_speciation_rate = 0.5, deme=100, uses_logging = FALSE)
simulation$runSimulation()
# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.6, 0.7, 0.8))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances (last 5)
tail(simulation$getSpeciesAbundances(1), 5)
# Remove the output directory
unlink("output", recursive = TRUE)
# Example application of a metacommunity to a simulation
library(rcoalescence)
# First we run a simulation to generate a sample database
simulation <- TreeSimulation$new()
# Simulate 100 individuals in a non-spatial manner
simulation$setSimulationParameters(seed=10, task =1, output_directory = "output", 
                                   min_speciation_rate = 0.01, deme=100)
simulation$runSimulation()
# Apply some metacommunity parameters, each generating a separate community
simulation$applySpeciationRates(speciation_rates = c(0.5, 0.9), 
                                metacommunity_option = c("simulated", "analytical"), 
                                metacommunity_size = c(10000, 1000000), 
                                metacommunity_speciation_rate = c(0.001, 0.001))
# Output to a database (stored at output/data_10_1.db)
simulation$output()
# Get the community references (which have a column relating to the metacommunity parameters)
simulation$getCommunityReferences()
# Get the metacommunity references
simulation$getMetacommunityReferences()
# Get the species richness
simulation$getSpeciesRichness(1)
# Remove the output directory
unlink("output", recursive = TRUE)
}
